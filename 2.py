"""
Программа для численного расчета скорости и координаты тела
по заданному закону ускорения a(t)
"""

import numpy as np
import matplotlib.pyplot as plt

def calculate_motion(a_func, t_max, v0=0, x0=0, n_steps=1000):
    """
    Вычисляет скорость и координату по заданному ускорению
    
    Параметры:
    a_func - функция ускорения a(t) (м/с²)
    t_max - максимальное время расчета (с)
    v0 - начальная скорость (м/с)
    x0 - начальная координата (м)
    n_steps - количество шагов интегрирования
    
    Возвращает:
    t - массив времени (с)
    x - массив координат (м)
    v - массив скоростей (м/с)
    a - массив ускорений (м/с²)
    """
    # Создаем равномерную сетку по времени
    t = np.linspace(0, t_max, n_steps)
    dt = t[1] - t[0]  # шаг по времени
    
    # Инициализируем массивы для результатов
    a = np.zeros_like(t)  # ускорение
    v = np.zeros_like(t)  # скорость
    x = np.zeros_like(t)  # координата
    
    # Задаем начальные условия
    v[0] = v0
    x[0] = x0
    
    # Численное интегрирование методом прямоугольников
    for i in range(1, n_steps):
        a[i] = a_func(t[i])  # вычисляем ускорение в момент t[i]
        v[i] = v[i-1] + a[i] * dt  # интегрируем скорость
        x[i] = x[i-1] + v[i] * dt  # интегрируем координату
    
    return t, x, v, a

def plot_results(t, x, v, a, title):
    """
    Строит графики ускорения, скорости и координаты
    
    Параметры:
    t - массив времени
    x - массив координат
    v - массив скоростей
    a - массив ускорений
    title - заголовок для графиков
    """
    plt.figure(figsize=(10, 8))
    
    # График ускорения
    plt.subplot(3, 1, 1)
    plt.plot(t, a, 'r')
    plt.title(f'Ускорение: {title}')
    plt.ylabel('a(t) [м/с²]')
    plt.grid()
    
    # График скорости
    plt.subplot(3, 1, 2)
    plt.plot(t, v, 'b')
    plt.title(f'Скорость: {title}')
    plt.ylabel('v(t) [м/с]')
    plt.grid()
    
    # График координаты
    plt.subplot(3, 1, 3)
    plt.plot(t, x, 'g')
    plt.title(f'Координата: {title}')
    plt.xlabel('Время t [с]')
    plt.ylabel('x(t) [м]')
    plt.grid()
    
    plt.tight_layout()
    plt.show()

# Пример 1: Линейное ускорение (аналитическое решение известно)
def a_linear(t):
    """a(t) = 6t + 2"""
    return 6*t + 2

# Пример 2: Квадратичное ускорение
def a_quadratic(t):
    """a(t) = t²"""
    return t**2

# Пример 3: Синусоидальное ускорение
def a_sin(t):
    """a(t) = sin(t)"""
    return np.sin(t)

# Пример 4: Экспоненциальное ускорение
def a_exp(t):
    """a(t) = e^t"""
    return np.exp(t)

# Пример 5: Затухающие колебания (из условия задачи)
def a_damped_osc(t):
    """a(t) = 10e^(-t)cos(8t)"""
    return 10*np.exp(-t)*np.cos(8*t)

# Демонстрация работы программы
if __name__ == "__main__":
    print("Демонстрация численного решения уравнений движения")
    
    # Выбираем пример для демонстрации
    example = a_linear  # можно заменить на любую другую функцию
    
    # Параметры расчета
    t_max = 5.0  # максимальное время расчета
    v0 = 0.0     # начальная скорость
    x0 = 0.0     # начальная координата
    
    # Выполняем расчет
    t, x, v, a = calculate_motion(example, t_max, v0, x0)
    
    # Строим графики
    plot_results(t, x, v, a, str(example.__doc__).strip())
    
    # Выводим последние значения
    print(f"При t = {t[-1]:.2f} с:")
    print(f"a = {a[-1]:.2f} м/с²")
    print(f"v = {v[-1]:.2f} м/с")
    print(f"x = {x[-1]:.2f} м")
